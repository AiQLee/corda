apply plugin: 'kotlin'
apply plugin: 'us.kirchmeier.capsule'

description 'Network bootstrapper'

configurations {
    runtimeArtifacts
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDir file('src/integration-test/resources')
        }
    }
    test {
        resources {
            srcDir file('src/test/resources')
        }
    }
}

dependencies {
    compile project(':node-api')
    compile "org.slf4j:slf4j-nop:$slf4j_version"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:$assertj_version"
    testCompile project(':test-common')
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task buildBootstrapperJar(type: FatCapsule) {
    applicationClass 'net.corda.bootstrapper.NetworkBootstrapper'
    archiveName "network-bootstrapper.jar"
    capsuleManifest {
        applicationVersion = corda_release_version
        systemProperties['visualvm.display.name'] = 'Network Bootstrapper'
        minJavaVersion = '1.8.0'
        jvmArgs = ['-XX:+UseG1GC']
    }
    from(project(':node:capsule').tasks['buildCordaJAR']) {
        rename 'corda-(.*)', 'corda.jar'
    }
//    applicationSource = files(
//            project(':node-api').configurations.runtime,
//            project(':node-api').jar
//    )
}

artifacts {
    runtimeArtifacts buildBootstrapperJar
}
